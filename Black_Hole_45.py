exec """\nimport os\nfrom time import time\nimport binascii\nimport math\nimport os.path\nimport sys\n\n# @Author Jurijus Pacalovas\n# Get the name of the current script\n\nif os.path.basename(sys.argv[0]) != "Black_Hole_45.py":\n    sys.exit("This is not 'Black_Hole_45.py'.")\n\nprint("The script 'Black_Hole_45.py' is currently running.")\n\n\nclass compression:\n    def cryptograpy_compression4(self):\n\n        self.name = "Created Quantum Software: Jurijus pacalovas"\n        print(self.name)\n\n        N5 = 1\n\n        if N5 == 1:\n\n            Clear = ""\n            \n\n\n            name = input("What is name of file input? ")\n\n            long_21 = len(name)\n\n            name_f = name[long_21 - 2 :]\n\n            if name_f == ".b":\n\n                i = 2\n\n            else:\n\n                i = 1\n            \n\n            # print(i)\n            if os.path.exists(name):\n\n                print("Path is exists!")\n\n            else:\n\n                print("Path is not exists!")\n\n                raise SystemExit\n\n            x = 0\n            C1 = 1\n            x1 = 0\n            x2 = 0\n            x3 = 0\n            X2 = 0\n            C1 = 0\n            C2 = 0\n            C3 = 0\n            C4 = 0\n            ZEROS_ONE_1 = ""\n            Circle_times = 0\n            Circle_times2 = 1\n            Circle_times3 = 0\n            CB = -1\n            Times1 = 0\n            Tc = 0\n            x = time()\n            File_information6_Times2_1 = 0\n            name_2 = name\n            Long_Change = len(name_2)\n            compress_or_not_compress = 1\n\n            File_information6_Times3 = 0\n\n            if i == 2:\n\n                C = 1\n\n            Long_Change = len(name_2)\n            s = ""\n            File_information5 = ""\n            File_information5_2 = ""\n            Clear = ""\n            Translate_info_Decimal = ""\n            D = 0\n            long_name = len(name)\n            with open(name, "rb") as binary_file:\n\n                data = binary_file.read()\n                s = str(data)\n\n                long_11 = len(data)\n\n                long_17 = len(data)\n\n                if long_17 == 0:\n\n                    raise SystemExit\n\n                END_working = 0\n\n                File_information6_Times2 = 0\n\n                File_information5_23 = ""\n\n                INFO18 = ""\n\n                File_information5_29 = ""\n\n                SpinS = 0\n\n                while END_working < 10:\n\n                    File_information6_Times3 = File_information6_Times3 + 1\n\n                    D = 1\n\n                    if D == 1:\n\n                        if File_information6_Times3 == 1:\n\n                            INFO = bin(int(binascii.hexlify(data), 16))[\n                                2:\n                            ]  # data to binary\n\n                            long_1 = len(INFO)\n\n                            long_11 = len(data)\n\n                            count_bits = (long_11 * 8) - long_1\n\n                            z = 0\n\n                            if count_bits != 0:\n\n                                while z < count_bits:\n\n                                    INFO = "0" + INFO\n\n                                    z = z + 1\n\n                            Check = INFO\n\n                            File_information5_2 = INFO\n\n                            Extact = File_information5_2\n\n                        long_13 = len(File_information5_2)\n\n                        long_12 = len(File_information5_2)\n\n                        if i == 1:\n                        	Compress_Times_1=int(input("How many times compress? "))\n                        	if Compress_Times_1>=(2**256)-2:\n                        		Compress_Times_1=(2**256)-2\n                        	if Compress_Times_1<1:\n                        		Compress_Times_1=1\n                        	if long_17 > (2**28) - 1 and i == 1:\n                        		print("print file is too big!")\n                        		raise SystemExit\n\n                        if i == 1:\n\n                            Ex = 1\n\n                            if Ex == 1:\n\n                                Extract1 = 0\n\n                                Find = 0\n\n                                En = 3\n\n                                Ci = 1\n\n                                M1 = 0\n\n                                Row1 = 0\n\n                                input_string = ""\n\n                                C1 = ""\n\n                                Row = 0\n\n                                I8 = INFO\n\n                                W3 = ""\n\n                                W4 = ""\n\n                                block = 0\n\n                                IF1 = ""\n\n                                long_F = len(I8)\n\n                                # print(long_F)\n\n                                FC = 0\n\n                                IF2 = ""\n\n                                Z7 = 0\n\n                                CZ = 0\n\n                                if Circle_times == 0:\n\n                                    SINFO = ""\n\n                                    TUPLE = INFO\n\n                                if Circle_times == 0:\n\n                                    SINFO = INFO\n\n                                long_bits_after = 0\n                                long_bits_after_b = 0\n                                long_bits_before = 0\n                                times_compress = 0\n                                long_after_bits = 0\n                                long_bits_after_b_1 = 0\n                                J = 1\n                                long_F1 = long_F\n                                long_one_time = long_F1\n                                stop_compress = 0\n                                while stop_compress != 1:\n                                    block = 0\n                                    long_after_bits = len(INFO)\n                                    Transform = INFO\n                                    long_F = len(I8)\n                                    T10 = ""\n                                    c_c = 0\n                                    while block < long_F:\n                                        times_c_c = 0\n                                        T8 = Transform[block : block + 24]\n                                        c_c = 0\n                                        c_c1 = 0\n                                        block += 24\n\n                                        if len(T8) != 24:\n\n                                            T10 += "1" + T8  # left bits\n\n                                        elif len(T8) == 24:\n\n                                            # Convert the binary string T8 to a decimal integer\n                                            num = int(\n                                                T8, 2\n                                            )  # Convert binary to decimal\n                                            num = num - 1\n                                            if num == -1:\n                                                num = (2**24) - 1\n                                            num_c = num\n                                            # num check\n                                            # print(f"Converted binary {T8} to decimal: {num}")\n                                            # Initial calculation\n                                            finish = 0\n                                            times = 0\n                                            binary_representation_before = len(\n                                                format(num, "01b")\n                                            )\n                                            # print("binary_representation_before_long")\n                                            # print(binary_representation_before)\n                                            # Main loop to calculate binary representations\n                                            while finish != 1:\n                                                if num > 1000000000:\n                                                    print(\n                                                        "This number is too big!"\n                                                    )\n                                                elif num < 0:\n                                                    print(\n                                                        "Please enter a non-negative integer."\n                                                    )\n                                                else:\n                                                    max_length = len(\n                                                        format(num, "b")\n                                                    )\n                                                    binary_numbers = []\n                                                    # Generate binary numbers of lengths 1 to max_length\n                                                    for length in range(\n                                                        1, max_length + 1\n                                                    ):\n                                                        for i in range(\n                                                            2**length\n                                                        ):\n                                                            binary_numbers.append(\n                                                                format(\n                                                                    i,\n                                                                    "0"\n                                                                    + str(\n                                                                        length\n                                                                    )\n                                                                    + "b",\n                                                                )\n                                                            )\n                                                    # Find the largest binary number less than or equal to the given number\n                                                    last_binary = None\n                                                    for (\n                                                        index,\n                                                        binary,\n                                                    ) in enumerate(\n                                                        binary_numbers\n                                                    ):\n                                                        if index > num:\n                                                            break\n                                                        last_binary = (\n                                                            binary,\n                                                            index,\n                                                        )\n                                                    if last_binary:\n                                                        (\n                                                            binary_representation,\n                                                            index,\n                                                        ) = last_binary\n                                                        long_br1 = len(\n                                                            binary_representation\n                                                        )\n                                                        Bi = int(\n                                                            binary_representation,\n                                                            2,\n                                                        )\n                                                        Bif = format(Bi, '01b')\n                                                        Bif1 = len(Bif)\n                                                        # print(len(binary_representation))\n                                                        # print(f"{binary_representation}: {index}")\n                                                        binary_to_number = int(\n                                                            binary_representation,\n                                                            2,\n                                                        )\n                                                        binary_representation = format(\n                                                            binary_to_number,\n                                                            "01b",\n                                                        )\n                                                        num = binary_to_number\n                                                        binary_to_number_number_after = (\n                                                            binary_to_number\n                                                        )\n                                                        # print("binary_to_number")\n                                                        # print(binary_to_number)\n                                                        length_tree = len(\n                                                            binary_representation\n                                                        )\n                                                        times += 1\n                                                        # print("times")\n                                                        # print(times)\n                                                        # print("length_tree")\n                                                        # print(str(length_tree))\n                                                        if length_tree < 8:\n                                                            finish = 1\n                                                            length_tree_after = (\n                                                                length_tree\n                                                            )\n                                                            times_after = times\n                                                            binary_representation_before_long = binary_representation_before\n                                                            # Continuation: another loop to perform further calculations\n                                            finish = 0\n                                            finish1 = 0\n                                            times = 0\n                                            count_number = 0\n                                            while finish1 != 1:\n                                                num = count_number\n                                                binary_representation_before = (\n                                                    len(format(num, "01b"))\n                                                )\n                                                finish = 0\n                                                times = 0\n                                                while finish != 2:\n                                                    if num < 0:\n                                                        print(\n                                                            "Please enter a non-negative integer."\n                                                        )\n                                                    else:\n                                                        max_length = len(\n                                                            format(num, "b")\n                                                        )\n                                                        binary_numbers = []\n                                                        for length in range(\n                                                            1, max_length + 1\n                                                        ):\n                                                            for i in range(\n                                                                2**length\n                                                            ):\n                                                                binary_numbers.append(\n                                                                    format(\n                                                                        i,\n                                                                        "0"\n                                                                        + str(\n                                                                            length\n                                                                        )\n                                                                        + "b",\n                                                                    )\n                                                                )\n                                                        last_binary = None\n                                                        for (\n                                                            index,\n                                                            binary,\n                                                        ) in enumerate(\n                                                            binary_numbers\n                                                        ):\n                                                            if index > num:\n                                                                break\n                                                            last_binary = (\n                                                                binary,\n                                                                index,\n                                                            )\n                                                        if last_binary:\n                                                            (\n                                                                binary_representation,\n                                                                index,\n                                                            ) = last_binary\n                                                            long_br = len(\n                                                                binary_representation\n                                                            )\n                                                            # print(binary_representation)\n                                                            Bi3 = int(\n                                                                binary_representation,\n                                                                2,\n                                                            )\n                                                            Bif = format(\n                                                                Bi3, '01b'\n                                                            )\n                                                            Bif2 = len(Bif)\n\n                                                            binary_to_number = int(\n                                                                binary_representation,\n                                                                2,\n                                                            )\n                                                            binary_representation = format(\n                                                                binary_to_number,\n                                                                "01b",\n                                                            )\n                                                            num = (\n                                                                binary_to_number\n                                                            )\n                                                            # print(num)\n                                                            # print(index)\n                                                            length_tree = len(\n                                                                binary_representation\n                                                            )\n                                                            times += 1\n                                                            if length_tree < 8:\n                                                                count_number += (\n                                                                    1\n                                                                )\n                                                                finish = 2\n                                                                \n                                                            #print(num)\n                                                            if (\n                                                                length_tree < 8\n                                                                and binary_representation_before\n                                                                == binary_representation_before_long\n                                                                and times_after\n                                                                == times\n                                                                and Bif1 == Bif2\n                                                                and Bi == Bi3 or num>2**24\n                                                            ):\n                                                                finish1 = 1\n                                                                # print("binary_representation_before_long")\n                                                                # print(binary_representation_before_long)\n                                                                # print("times_after")\n                                                                # print(binary_representation_before_long)\n                                                                # print(times_after)\n                                                                # print("length_tree_after")\n                                                                # print(length_tree_after)\n                                                                # print("binary_to_number_number_after")\n                                                                # print(binary_to_number_number_after)\n                                                                # print("count_number")\n                                                                count_number = (\n                                                                    count_number\n                                                                    - 1\n                                                                )\n                                                                # print(length_tree)\n                                                                # print(count_number)\n\n                                                                # print(times_after)#long after\n\n                                                                # print(binary_representation_before_long)#long after\n\n                                                                # print(binary_to_number_number_after)#binary represation\n\n                                                                # print(binary_to_number_number_after),#binary represation\n                                                                # print(length_tree_after)# after\n                                                                #\n\n                                                                binary_representation = format(\n                                                                    Bi3,\n                                                                    "01b",\n                                                                )\n                                                                times_after = (\n                                                                    times_after\n                                                                    - 1\n                                                                )\n                                                                # print(binary_to_number)\n                                                                binary_representation_before_long1 = format(\n                                                                    times_after,\n                                                                    "05b",\n                                                                )\n                                                                #print(binary_representation_before_long1)\n                                                                # print(binary_representation_before)\n                                                                length_tree_after = format(\n                                                                    binary_representation_before_long,\n                                                                    "05b",\n                                                                )\n\n                                                                length_tree_after1 = (\n                                                                    Bif2\n                                                                )\n                                                                length_tree_after1 = (\n                                                                    length_tree_after1\n                                                                    - 1\n                                                                )\n                                                                length_tree_after2 = format(\n                                                                    length_tree_after1,\n                                                                    "03b",\n                                                                )\n                                                                if count_number>2**24:\n                                                                	IFC="1"+ T8\n\n                                                                # print(binary_representation_before)\n                                                                elif count_number+384==num_c:\n                                                                	count_number=count_number+384\n                                                                \n\n	                                                                IFC = (\n	                                                                    "0"+"0"\n	                                                                    + length_tree_after2\n	                                                                    + binary_representation\n	                                                                    + binary_representation_before_long1\n	                                                                    + length_tree_after\n	\n	                                                                )\n                                                                elif count_number==num_c:\n                                                                \n                                                                \n\n                                                                    IFC = (\n                                                                    "0"+"1"\n                                                                    + length_tree_after2\n                                                                    + binary_representation\n                                                                    + binary_representation_before_long1\n                                                                    + length_tree_after\n\n                                                                )\n                                                                else:\n                                                                	IFC="1"+T8\n                                                                # print(length_tree_after2)\n                                                                # print(length_tree_after)\n                                                                # print(binary_representation_before_long1)\n                                                                # print(binary_representation)\n                                                                # print(len(IFC))\n                                                                # print(count_number)\n                                                                if (\n                                                                    len(IFC)\n                                                                    <= 23\n                                                                    and num_c\n                                                                    == count_number\n                                                                    and len(\n                                                                        length_tree_after\n                                                                    )\n                                                                    == 5\n                                                                    and len(\n                                                                        binary_representation\n                                                                    )\n                                                                    <= 8\n                                                                    and len(\n                                                                        binary_representation_before_long1\n                                                                    )\n                                                                    == 5\n                                                                    and len(\n                                                                        length_tree_after2\n                                                                    )\n                                                                    == 3\n                                                                ):\n                                                                    T10 += IFC\n                                                                    #print(IFC)\n                                                                else:\n                                                                    \n                                                                    num2 = int(\n                                                                    T8, 2)\n                                                                    IFC = format(\n                                                                        num2,\n                                                                        "024b",)\n                                                                    T10 += (\n                                                                        \n                                                                        	"1"+IFC)         \n                                              \n                                                                    times_compress += 1\n\n                                    INFO = T10\n                                    T8 = T10\n\n                                    long_one_time = len(T10)\n\n                                    if (\n                                        long_one_time <= 256\n                                        and times_compress >= 0\n                                        or times_compress == Compress_Times_1\n                                    ):\n                                        stop_compress = 1\n                                        Compress_file = 1\n                                    long_bits_after_b_1 = 1\n                                    times_compress += 1\n                                    \n\n                                # print(Compress_file)\n                                if Compress_file == 1:\n                                    Extract1 = 1\n                                    if Extract1 == 1:\n                                        times_compression_format = format(\n                                            times_compress, "01b"\n                                        )\n                                        # print(times_compression_format)\n                                        times_255 = format(\n                                            len(times_compression_format),\n                                            "08b",\n                                        )\n                                        times_255p = format(\n                                            len(times_255),\n                                            "016b",\n                                        )\n\n                                        # print(times_255_p_255)\n                                        #  long of file  start number file before\n\n                                        I_F_B = format(long_F1, "01b")\n                                        # long of long before of file\n                                        I_F_B_L = format(len(I_F_B), "08b")\n\n                                        # long of file\n                                        l_F_N = len(INFO)\n                                        # long of  last number file after\n                                        I_F_A = format(l_F_N, "01b")\n                                        #  After long of long of file\n                                        I_F_A_L = format(len(I_F_A), "08b")\n                                        File_information5_17 = (\n                                            "1"\n                                            + times_255p\n                                            + times_255\n                                            + times_compression_format\n                                            + I_F_B_L\n                                            + I_F_B\n                                            + I_F_A_L\n                                            + I_F_A\n                                            + INFO\n                                        )\n\n                                        long_1 = len(File_information5_17)\n                                        add_bits = ""\n                                        count_bits = (8 - long_1 % 8) % 8\n\n                                        if count_bits > 0 and count_bits < 8:\n                                            for _ in range(count_bits):\n                                                add_bits = "0" + add_bits\n\n                                    if Extract1 == 1:\n\n                                        File_information5_17 = (\n                                            add_bits + File_information5_17\n                                        )\n                                        L = len(File_information5_17)\n\n                                        # print(L)\n\n                                        n = int(File_information5_17, 2)\n\n                                        width_bits = len(File_information5_17)\n\n                                        width_bits = (width_bits // 8) * 2\n\n                                        width_bits = str(width_bits)\n\n                                        width_bits = "%0" + width_bits + "x"\n\n                                        width_bits3 = binascii.unhexlify(\n                                            width_bits % n\n                                        )\n\n                                        width_bits2 = len(width_bits3)\n\n                                        File_information5_2 = Clear\n\n                                        jl = width_bits3\n\n                                        name1 = name + ".b"\n\n                                        with open(name1, "wb") as f2:\n\n                                            f2.write(jl)\n\n                                        x2 = time()\n\n                                        x3 = x2 - x\n\n                                        print(\n                                            f"Speed bits: {(long_11) / x3:.5f}"\n                                        )\n\n                                        xs = float(x3)\n\n                                        xs = str(xs)\n\n                                        return xs\n\n                        if i == 2:\n\n                            if C == 1:\n\n                                Extract1 = 0\n                                File_information5 = INFO\n\n                                # extract\n\n                                if Circle_times3 == 0:\n\n                                    long_16 = len(File_information5)\n\n                                    if File_information5[:1] == "0":\n\n                                        while File_information5[:1] != "1":\n\n                                            if File_information5[:1] == "0":\n\n                                                File_information5 = (\n                                                    File_information5[1:]\n                                                )\n\n                                    if File_information5[:1] == "1":\n\n                                        File_information5 = File_information5[\n                                            1:\n                                        ]\n\n                                INFO = File_information5\n                                # print(INFO)\n\n                                if Circle_times3 == 0:\n                                    # times count extract\n\n                                    CEI = int(INFO[:16], 2)\n\n                                    # print(CE)\n\n                                    INFO = INFO[16:]\n\n                                    CE = int(INFO[:CEI], 2)\n\n                                    # print(CE)\n\n                                    INFO = INFO[CEI:]\n\n                                    tce = int(INFO[:CE], 2)\n\n                                    # print(tce)\n\n                                    INFO = INFO[CE:]\n                                    #############\n\n                                    # INFO before file before size of file\n                                    CE1 = int(INFO[:8], 2)\n\n                                    # print(CE)\n\n                                    INFO = INFO[8:]\n                                    bfnz = int(INFO[:CE1], 2)\n\n                                    # print(bfnz)\n\n                                    INFO = INFO[CE1:]\n                                    #############\n\n                                    # INFO before file after size of file\n                                    CE2 = int(INFO[:8], 2)\n\n                                    # print(CE)\n\n                                    INFO = INFO[8:]\n                                    efnz = int(INFO[:CE2], 2)\n\n                                    # print(efnz)\n\n                                    INFO = INFO[CE2:]\n                                    # e.g.: 12 8-10\n                                    #############\n\n                                while Extract1 != 1:\n                                    # 1 bits 21\n                                    # 0 19\n                                    long_F = len(INFO)\n                                    # print(long_F)\n\n                                    block = 0\n                                    TUPLE = ""\n                                    while block < long_F:\n                                        take_c_or_l = INFO[block : block + 23]\n                                        long_l = len(take_c_or_l)\n                                        # print(long_l)\n                                        if INFO[block : block + 1] == "1":\n                                            block += 1\n                                            T8 = INFO[block : block + 24]\n                                            TUPLE += T8\n                                            block += 24\n\n                                        elif INFO[block : block + 1] == "0":\n\n                                            block += 1\n                                            # print(take_c_or_l)\n\n                                            # print("4")\n                                            # print(len(num3))\n                                            # print(num3)\n                                            # binary_representation+length_tree_after+binary_representation_before_long1#\n\n                                            # print(length_tree_after) #long after\n                                            # print(times_after)#binary repreatation\n                                            # print(binary_representation_before_long)#long before file\n                                            # print(times_after)#long after\n\n                                            # print(binary_representation_before_long)#long after\n\n                                            # print(binary_to_number_number_after)#binary represation\n                                            if INFO[block:block+1]=="1":\n                                            	find_c_v=0\n                                            else:\n                                            	find_c_v=1\n                                            block+=1\n                                            \n                                            Bif1 = int(\n                                                (INFO[block : block + 3]), 2\n                                            )\n                                            Bif1 += 1\n                                            block += 3\n                                            if Bif1==0:\n                                            	read_b==1\n                                            else:\n                                                read_b=Bif1                                                                                                                             \n                                                                                                                                                                               \n                                            Bi3 = int(\n                                                (INFO[block : block + read_b]), 2\n                                            )\n                                            # print(times_after)\n\n                                            block += read_b\n                                            times_after = int(\n                                                (INFO[block : block + 5]), 2\n                                            )\n                                            times_after = times_after + 1\n                                            # print(binary_representation_before_long)\n\n                                            block += 5\n\n                                            binary_representation_before_long = int(\n                                                (INFO[block : block + 5]), 2\n                                            )\n                                            # print(binary_to_number_number_after)\n\n                                            block += 5\n\n\n                                            # open 3 key\n                                            # binary length tree start and finish and binanary represation\n\n                                            # print(len(num3))\n\n                                            # Continuation: another loop to perform further calculations\n                                            finish = 0\n                                            finish1 = 0\n                                            times = 0\n                                            count_number = 0\n                                            while finish1 != 1:\n                                                num = count_number\n                                                binary_representation_before = (\n                                                    len(format(num, "01b"))\n                                                )\n                                                finish = 0\n                                                times = 0\n                                                while finish != 2:\n                                                    if num < 0:\n                                                        print(\n                                                            "Please enter a non-negative integer."\n                                                        )\n                                                    else:\n                                                        max_length = len(\n                                                            format(num, "b")\n                                                        )\n                                                        binary_numbers = []\n                                                        for length in range(\n                                                            1, max_length + 1\n                                                        ):\n                                                            for i in range(\n                                                                2**length\n                                                            ):\n                                                                binary_numbers.append(\n                                                                    format(\n                                                                        i,\n                                                                        "0"\n                                                                        + str(\n                                                                            length\n                                                                        )\n                                                                        + "b",\n                                                                    )\n                                                                )\n                                                        last_binary = None\n                                                        for (\n                                                            index,\n                                                            binary,\n                                                        ) in enumerate(\n                                                            binary_numbers\n                                                        ):\n                                                            if index > num:\n                                                                break\n                                                            last_binary = (\n                                                                binary,\n                                                                index,\n                                                            )\n                                                        if last_binary:\n                                                            (\n                                                                binary_representation,\n                                                                index,\n                                                            ) = last_binary\n                                                            long_br = len(\n                                                                binary_representation\n                                                            )\n                                                            Bi = int(\n                                                                binary_representation,\n                                                                2,\n                                                            )\n                                                            Bif = format(\n                                                                Bi, '01b'\n                                                            )\n                                                            Bif2 = len(Bif)\n                                                            # print(long_br)\n                                                            binary_to_number = int(\n                                                                binary_representation,\n                                                                2,\n                                                            )\n\n                                                            binary_representation = format(\n                                                                binary_to_number,\n                                                                "01b",\n                                                            )\n                                                            num = (\n                                                                binary_to_number\n                                                            )\n                                                            length_tree = len(\n                                                                binary_representation\n                                                            )\n                                                            times += 1\n                                                            if length_tree < 8:\n                                                                count_number += (\n                                                                    1\n                                                                )\n                                                                finish = 2\n                                                            if (\n                                                                length_tree < 8\n                                                                and binary_representation_before\n                                                                == binary_representation_before_long\n                                                                and times_after\n                                                                == times\n                                                                and Bif1 == Bif2\n                                                                and Bi == Bi3\n                                                            ):\n                                                                finish1 = 1\n\n                                                                # print("binary_representation_before_long")\n                                                                # print(binary_representation_before_long)\n                                                                # print("times_after")\n                                                                # print(times_after)\n                                                                # print("length_tree_after")\n                                                                # print(length_tree)\n                                                                # print("binary_to_number_number_after")\n                                                                # print(binary_to_number_number_after)\n                                                                # print(count_number)\n                                                                count_number = (\n                                                                    count_number\n                                                                    - 1\n                                                                )\n                                                                if find_c_v==1:\n                                                                	count_number=count_number+384\n                                                                count_number += (\n                                                                    1\n                                                                )\n                                                                if (\n                                                                    count_number\n                                                                    == 2**24\n                                                                ):\n                                                                    count_number = (\n                                                                        0\n                                                                    )\n\n                                                                IFC = format(\n                                                                    count_number,\n                                                                    "024b",\n                                                                )\n                                                                TUPLE += IFC\n\n                                                                # print(block)\n                                                                # print(IFC)\n\n                                    TUPLE1 = TUPLE\n                                    INFO = TUPLE\n                                    # print(INFO)\n\n                                    long_L = len(TUPLE)\n                                    Tc += 1\n                                    # print(Tc)\n\n                                    if tce == Tc:\n                                        Extract1 = 1\n\n                                if Extract1 == 1:\n                                    num4 = int(TUPLE1, 2)\n                                    # print(num4)\n                                    C19 = "0" + str(bfnz) + "b"\n                                    TUPLE1 = format(num4, C19)\n                                    File_information5_17 = TUPLE1\n\n                                if Extract1 == 1:\n                                    L = len(File_information5_17)\n                                    n = int(File_information5_17, 2)\n                                    width_bits = "%0" + str((L // 8) * 2) + "x"\n                                    width_bits3 = binascii.unhexlify(\n                                        width_bits % n\n                                    )\n                                    width_bits2 = len(width_bits3)\n                                    name2 = name[:-2]\n                                    start_time = time()\n                                    with open(name2, "wb") as f2:\n                                        f2.write(width_bits3)\n                                    elapsed_time = time() - start_time\n                                    speed_bits = (long_11 * 8) // float(\n                                        elapsed_time\n                                    )\n                                    print(f"Speed bits: {speed_bits:.5f}")\n                                    return str(elapsed_time)\n\n\nd = compression()\nxw1 = d.cryptograpy_compression4()\nprint(xw1)\n"""
